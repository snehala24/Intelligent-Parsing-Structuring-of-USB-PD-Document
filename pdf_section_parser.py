"""
pdf_section_parser.py
---------------------
Parses each section in the USB PD Specification PDF based on TOC entries,
structures them in JSONL format (usb_pd_spec.jsonl).

Requires: pdfplumber, tqdm
Note: Assumes usb_pd_toc.jsonl already generated by pdf_toc_parser.py
"""

import pdfplumber
import json
from tqdm import tqdm

def read_toc_jsonl(toc_filename):
    toc = []
    with open(toc_filename, 'r', encoding='utf-8') as f:
        for line in f:
            toc.append(json.loads(line))
    return toc

def extract_sections(pdf_path, toc):
    sections = []
    with pdfplumber.open(pdf_path) as pdf:
        for toc_entry in tqdm(toc, desc="Parsing sections"):
            start_page = toc_entry['page'] - 1  # pdfplumber zero-based
            title = toc_entry['title']
            # Get section title text from start page
            raw_text = pdf.pages[start_page].extract_text() or ''
            section_text = ""
            # Heuristic: if next TOC entry is on a later page, get text in range
            curr_idx = toc.index(toc_entry)
            next_page = None
            if curr_idx+1 < len(toc):
                next_page = toc[curr_idx+1]['page'] - 1
            else:
                next_page = len(pdf.pages)
            for pidx in range(start_page, min(next_page, len(pdf.pages))):
                section_text += pdf.pages[pidx].extract_text() or ''
                section_text += '\n'
            entry = toc_entry.copy()
            entry['content'] = section_text.strip()
            sections.append(entry)
    return sections

if __name__ == '__main__':
    import sys
    pdf_file = sys.argv[1]
    toc_file = sys.argv[2] if len(sys.argv) > 2 else 'usb_pd_toc.jsonl'
    toc_entries = read_toc_jsonl(toc_file)
    sections = extract_sections(pdf_file, toc_entries)
    with open('usb_pd_spec.jsonl', 'w', encoding='utf-8') as f:
        for obj in sections:
            f.write(json.dumps(obj, ensure_ascii=False) + '\n')
    print(f"Parsed {len(sections)} sections to 'usb_pd_spec.jsonl'.")

